# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AffectedRowsOutput {
  count: Int!
}

type AggregateEmailLink {
  _count: EmailLinkCountAggregate
  _max: EmailLinkMaxAggregate
  _min: EmailLinkMinAggregate
}

type AggregateSocialLink {
  _count: SocialLinkCountAggregate
  _max: SocialLinkMaxAggregate
  _min: SocialLinkMinAggregate
}

type AggregateWallet {
  _avg: WalletAvgAggregate
  _count: WalletCountAggregate
  _max: WalletMaxAggregate
  _min: WalletMinAggregate
  _sum: WalletSumAggregate
}

input DateTimeFieldUpdateOperationsInput {
  set: DateTimeISO
}

input DateTimeFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeFilter
  notIn: [DateTimeISO!]
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTimeISO!]
}

type EmailLink {
  createdAt: DateTimeISO!

  """Initiator of the create action. Ex. user, admin"""
  createdBy: String!

  """soft delete, if set then deleted"""
  deletedAt: DateTimeISO!

  """Initiator of the delete action. Ex. user, admin"""
  deltedBy: String!
  email: String!
  id: String!
  wallet(where: WalletWhereInput): Wallet
  walletId: String
}

type EmailLinkCountAggregate {
  _all: Int!
  createdAt: Int!
  createdBy: Int!
  deletedAt: Int!
  deltedBy: Int!
  email: Int!
  id: Int!
  walletId: Int!
}

input EmailLinkCountOrderByAggregateInput {
  createdAt: SortOrder
  createdBy: SortOrder
  deletedAt: SortOrder
  deltedBy: SortOrder
  email: SortOrder
  id: SortOrder
  walletId: SortOrder
}

input EmailLinkCreateInput {
  createdAt: DateTimeISO
  createdBy: String!
  deletedAt: DateTimeISO!
  deltedBy: String!
  email: String!
  id: String
  wallet: WalletCreateNestedOneWithoutEmailLinksInput
}

input EmailLinkCreateManyInput {
  createdAt: DateTimeISO
  createdBy: String!
  deletedAt: DateTimeISO!
  deltedBy: String!
  email: String!
  id: String
  walletId: String
}

input EmailLinkCreateManyWalletInput {
  createdAt: DateTimeISO
  createdBy: String!
  deletedAt: DateTimeISO!
  deltedBy: String!
  email: String!
  id: String
}

input EmailLinkCreateManyWalletInputEnvelope {
  data: [EmailLinkCreateManyWalletInput!]!
}

input EmailLinkCreateNestedManyWithoutWalletInput {
  connect: [EmailLinkWhereUniqueInput!]
  connectOrCreate: [EmailLinkCreateOrConnectWithoutWalletInput!]
  create: [EmailLinkCreateWithoutWalletInput!]
  createMany: EmailLinkCreateManyWalletInputEnvelope
}

input EmailLinkCreateOrConnectWithoutWalletInput {
  create: EmailLinkCreateWithoutWalletInput!
  where: EmailLinkWhereUniqueInput!
}

input EmailLinkCreateWithoutWalletInput {
  createdAt: DateTimeISO
  createdBy: String!
  deletedAt: DateTimeISO!
  deltedBy: String!
  email: String!
  id: String
}

type EmailLinkGroupBy {
  _count: EmailLinkCountAggregate
  _max: EmailLinkMaxAggregate
  _min: EmailLinkMinAggregate
  createdAt: DateTimeISO!
  createdBy: String!
  deletedAt: DateTimeISO!
  deltedBy: String!
  email: String!
  id: String!
  walletId: String
}

input EmailLinkListRelationFilter {
  every: EmailLinkWhereInput
  none: EmailLinkWhereInput
  some: EmailLinkWhereInput
}

type EmailLinkMaxAggregate {
  createdAt: DateTimeISO
  createdBy: String
  deletedAt: DateTimeISO
  deltedBy: String
  email: String
  id: String
  walletId: String
}

input EmailLinkMaxOrderByAggregateInput {
  createdAt: SortOrder
  createdBy: SortOrder
  deletedAt: SortOrder
  deltedBy: SortOrder
  email: SortOrder
  id: SortOrder
  walletId: SortOrder
}

type EmailLinkMinAggregate {
  createdAt: DateTimeISO
  createdBy: String
  deletedAt: DateTimeISO
  deltedBy: String
  email: String
  id: String
  walletId: String
}

input EmailLinkMinOrderByAggregateInput {
  createdAt: SortOrder
  createdBy: SortOrder
  deletedAt: SortOrder
  deltedBy: SortOrder
  email: SortOrder
  id: SortOrder
  walletId: SortOrder
}

input EmailLinkOrderByRelationAggregateInput {
  _count: SortOrder
}

input EmailLinkOrderByWithAggregationInput {
  _count: EmailLinkCountOrderByAggregateInput
  _max: EmailLinkMaxOrderByAggregateInput
  _min: EmailLinkMinOrderByAggregateInput
  createdAt: SortOrder
  createdBy: SortOrder
  deletedAt: SortOrder
  deltedBy: SortOrder
  email: SortOrder
  id: SortOrder
  walletId: SortOrder
}

input EmailLinkOrderByWithRelationInput {
  createdAt: SortOrder
  createdBy: SortOrder
  deletedAt: SortOrder
  deltedBy: SortOrder
  email: SortOrder
  id: SortOrder
  wallet: WalletOrderByWithRelationInput
  walletId: SortOrder
}

enum EmailLinkScalarFieldEnum {
  createdAt
  createdBy
  deletedAt
  deltedBy
  email
  id
  walletId
}

input EmailLinkScalarWhereInput {
  AND: [EmailLinkScalarWhereInput!]
  NOT: [EmailLinkScalarWhereInput!]
  OR: [EmailLinkScalarWhereInput!]
  createdAt: DateTimeFilter
  createdBy: StringFilter
  deletedAt: DateTimeFilter
  deltedBy: StringFilter
  email: StringFilter
  id: StringFilter
  walletId: StringNullableFilter
}

input EmailLinkScalarWhereWithAggregatesInput {
  AND: [EmailLinkScalarWhereWithAggregatesInput!]
  NOT: [EmailLinkScalarWhereWithAggregatesInput!]
  OR: [EmailLinkScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  createdBy: StringWithAggregatesFilter
  deletedAt: DateTimeWithAggregatesFilter
  deltedBy: StringWithAggregatesFilter
  email: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  walletId: StringNullableWithAggregatesFilter
}

input EmailLinkUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  createdBy: StringFieldUpdateOperationsInput
  deletedAt: DateTimeFieldUpdateOperationsInput
  deltedBy: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  wallet: WalletUpdateOneWithoutEmailLinksNestedInput
}

input EmailLinkUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  createdBy: StringFieldUpdateOperationsInput
  deletedAt: DateTimeFieldUpdateOperationsInput
  deltedBy: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
}

input EmailLinkUpdateManyWithWhereWithoutWalletInput {
  data: EmailLinkUpdateManyMutationInput!
  where: EmailLinkScalarWhereInput!
}

input EmailLinkUpdateManyWithoutWalletNestedInput {
  connect: [EmailLinkWhereUniqueInput!]
  connectOrCreate: [EmailLinkCreateOrConnectWithoutWalletInput!]
  create: [EmailLinkCreateWithoutWalletInput!]
  createMany: EmailLinkCreateManyWalletInputEnvelope
  delete: [EmailLinkWhereUniqueInput!]
  deleteMany: [EmailLinkScalarWhereInput!]
  disconnect: [EmailLinkWhereUniqueInput!]
  set: [EmailLinkWhereUniqueInput!]
  update: [EmailLinkUpdateWithWhereUniqueWithoutWalletInput!]
  updateMany: [EmailLinkUpdateManyWithWhereWithoutWalletInput!]
  upsert: [EmailLinkUpsertWithWhereUniqueWithoutWalletInput!]
}

input EmailLinkUpdateWithWhereUniqueWithoutWalletInput {
  data: EmailLinkUpdateWithoutWalletInput!
  where: EmailLinkWhereUniqueInput!
}

input EmailLinkUpdateWithoutWalletInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  createdBy: StringFieldUpdateOperationsInput
  deletedAt: DateTimeFieldUpdateOperationsInput
  deltedBy: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
}

input EmailLinkUpsertWithWhereUniqueWithoutWalletInput {
  create: EmailLinkCreateWithoutWalletInput!
  update: EmailLinkUpdateWithoutWalletInput!
  where: EmailLinkWhereUniqueInput!
}

input EmailLinkWhereInput {
  AND: [EmailLinkWhereInput!]
  NOT: [EmailLinkWhereInput!]
  OR: [EmailLinkWhereInput!]
  createdAt: DateTimeFilter
  createdBy: StringFilter
  deletedAt: DateTimeFilter
  deltedBy: StringFilter
  email: StringFilter
  id: StringFilter
  wallet: WalletNullableRelationFilter
  walletId: StringNullableFilter
}

input EmailLinkWhereUniqueInput {
  AND: [EmailLinkWhereInput!]
  NOT: [EmailLinkWhereInput!]
  OR: [EmailLinkWhereInput!]
  createdAt: DateTimeFilter
  createdBy: StringFilter
  deletedAt: DateTimeFilter
  deltedBy: StringFilter
  email: StringFilter
  id: String
  wallet: WalletNullableRelationFilter
  walletId: StringNullableFilter
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

type Mutation {
  createManyEmailLink(data: [EmailLinkCreateManyInput!]!): AffectedRowsOutput!
  createManySocialLink(data: [SocialLinkCreateManyInput!]!): AffectedRowsOutput!
  createManyWallet(data: [WalletCreateManyInput!]!): AffectedRowsOutput!
  createOneEmailLink(data: EmailLinkCreateInput!): EmailLink!
  createOneSocialLink(data: SocialLinkCreateInput!): SocialLink!
  createOneWallet(data: WalletCreateInput!): Wallet!
  deleteManyEmailLink(where: EmailLinkWhereInput): AffectedRowsOutput!
  deleteManySocialLink(where: SocialLinkWhereInput): AffectedRowsOutput!
  deleteManyWallet(where: WalletWhereInput): AffectedRowsOutput!
  deleteOneEmailLink(where: EmailLinkWhereUniqueInput!): EmailLink
  deleteOneSocialLink(where: SocialLinkWhereUniqueInput!): SocialLink
  deleteOneWallet(where: WalletWhereUniqueInput!): Wallet
  updateManyEmailLink(data: EmailLinkUpdateManyMutationInput!, where: EmailLinkWhereInput): AffectedRowsOutput!
  updateManySocialLink(data: SocialLinkUpdateManyMutationInput!, where: SocialLinkWhereInput): AffectedRowsOutput!
  updateManyWallet(data: WalletUpdateManyMutationInput!, where: WalletWhereInput): AffectedRowsOutput!
  updateOneEmailLink(data: EmailLinkUpdateInput!, where: EmailLinkWhereUniqueInput!): EmailLink
  updateOneSocialLink(data: SocialLinkUpdateInput!, where: SocialLinkWhereUniqueInput!): SocialLink
  updateOneWallet(data: WalletUpdateInput!, where: WalletWhereUniqueInput!): Wallet
  upsertOneEmailLink(create: EmailLinkCreateInput!, update: EmailLinkUpdateInput!, where: EmailLinkWhereUniqueInput!): EmailLink!
  upsertOneSocialLink(create: SocialLinkCreateInput!, update: SocialLinkUpdateInput!, where: SocialLinkWhereUniqueInput!): SocialLink!
  upsertOneWallet(create: WalletCreateInput!, update: WalletUpdateInput!, where: WalletWhereUniqueInput!): Wallet!
}

input NestedDateTimeFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeFilter
  notIn: [DateTimeISO!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTimeISO!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  isSet: Boolean
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  isSet: Boolean
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  isSet: Boolean
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type Query {
  aggregateEmailLink(cursor: EmailLinkWhereUniqueInput, orderBy: [EmailLinkOrderByWithRelationInput!], skip: Int, take: Int, where: EmailLinkWhereInput): AggregateEmailLink!
  aggregateSocialLink(cursor: SocialLinkWhereUniqueInput, orderBy: [SocialLinkOrderByWithRelationInput!], skip: Int, take: Int, where: SocialLinkWhereInput): AggregateSocialLink!
  aggregateWallet(cursor: WalletWhereUniqueInput, orderBy: [WalletOrderByWithRelationInput!], skip: Int, take: Int, where: WalletWhereInput): AggregateWallet!
  emailLink(where: EmailLinkWhereUniqueInput!): EmailLink
  emailLinks(cursor: EmailLinkWhereUniqueInput, distinct: [EmailLinkScalarFieldEnum!], orderBy: [EmailLinkOrderByWithRelationInput!], skip: Int, take: Int, where: EmailLinkWhereInput): [EmailLink!]!
  findFirstEmailLink(cursor: EmailLinkWhereUniqueInput, distinct: [EmailLinkScalarFieldEnum!], orderBy: [EmailLinkOrderByWithRelationInput!], skip: Int, take: Int, where: EmailLinkWhereInput): EmailLink
  findFirstEmailLinkOrThrow(cursor: EmailLinkWhereUniqueInput, distinct: [EmailLinkScalarFieldEnum!], orderBy: [EmailLinkOrderByWithRelationInput!], skip: Int, take: Int, where: EmailLinkWhereInput): EmailLink
  findFirstSocialLink(cursor: SocialLinkWhereUniqueInput, distinct: [SocialLinkScalarFieldEnum!], orderBy: [SocialLinkOrderByWithRelationInput!], skip: Int, take: Int, where: SocialLinkWhereInput): SocialLink
  findFirstSocialLinkOrThrow(cursor: SocialLinkWhereUniqueInput, distinct: [SocialLinkScalarFieldEnum!], orderBy: [SocialLinkOrderByWithRelationInput!], skip: Int, take: Int, where: SocialLinkWhereInput): SocialLink
  findFirstWallet(cursor: WalletWhereUniqueInput, distinct: [WalletScalarFieldEnum!], orderBy: [WalletOrderByWithRelationInput!], skip: Int, take: Int, where: WalletWhereInput): Wallet
  findFirstWalletOrThrow(cursor: WalletWhereUniqueInput, distinct: [WalletScalarFieldEnum!], orderBy: [WalletOrderByWithRelationInput!], skip: Int, take: Int, where: WalletWhereInput): Wallet
  getEmailLink(where: EmailLinkWhereUniqueInput!): EmailLink
  getSocialLink(where: SocialLinkWhereUniqueInput!): SocialLink
  getWallet(where: WalletWhereUniqueInput!): Wallet
  groupByEmailLink(by: [EmailLinkScalarFieldEnum!]!, having: EmailLinkScalarWhereWithAggregatesInput, orderBy: [EmailLinkOrderByWithAggregationInput!], skip: Int, take: Int, where: EmailLinkWhereInput): [EmailLinkGroupBy!]!
  groupBySocialLink(by: [SocialLinkScalarFieldEnum!]!, having: SocialLinkScalarWhereWithAggregatesInput, orderBy: [SocialLinkOrderByWithAggregationInput!], skip: Int, take: Int, where: SocialLinkWhereInput): [SocialLinkGroupBy!]!
  groupByWallet(by: [WalletScalarFieldEnum!]!, having: WalletScalarWhereWithAggregatesInput, orderBy: [WalletOrderByWithAggregationInput!], skip: Int, take: Int, where: WalletWhereInput): [WalletGroupBy!]!
  socialLink(where: SocialLinkWhereUniqueInput!): SocialLink
  socialLinks(cursor: SocialLinkWhereUniqueInput, distinct: [SocialLinkScalarFieldEnum!], orderBy: [SocialLinkOrderByWithRelationInput!], skip: Int, take: Int, where: SocialLinkWhereInput): [SocialLink!]!
  wallet(where: WalletWhereUniqueInput!): Wallet
  wallets(cursor: WalletWhereUniqueInput, distinct: [WalletScalarFieldEnum!], orderBy: [WalletOrderByWithRelationInput!], skip: Int, take: Int, where: WalletWhereInput): [Wallet!]!
}

enum QueryMode {
  default
  insensitive
}

type SocialLink {
  createdAt: DateTimeISO!

  """Initiator of the create action. Ex. user, admin"""
  createdBy: String!

  """soft delete, if set then deleted"""
  deletedAt: DateTimeISO!

  """Initiator of the delete action. Ex. user, admin"""
  deltedBy: String!
  id: String!

  """twitter, facebook, instagram, etc."""
  platform: String!
  username: String!
  wallet(where: WalletWhereInput): Wallet
  walletId: String
}

type SocialLinkCountAggregate {
  _all: Int!
  createdAt: Int!
  createdBy: Int!
  deletedAt: Int!
  deltedBy: Int!
  id: Int!
  platform: Int!
  username: Int!
  walletId: Int!
}

input SocialLinkCountOrderByAggregateInput {
  createdAt: SortOrder
  createdBy: SortOrder
  deletedAt: SortOrder
  deltedBy: SortOrder
  id: SortOrder
  platform: SortOrder
  username: SortOrder
  walletId: SortOrder
}

input SocialLinkCreateInput {
  createdAt: DateTimeISO
  createdBy: String!
  deletedAt: DateTimeISO!
  deltedBy: String!
  id: String
  platform: String!
  username: String!
  wallet: WalletCreateNestedOneWithoutSocialLinksInput
}

input SocialLinkCreateManyInput {
  createdAt: DateTimeISO
  createdBy: String!
  deletedAt: DateTimeISO!
  deltedBy: String!
  id: String
  platform: String!
  username: String!
  walletId: String
}

input SocialLinkCreateManyWalletInput {
  createdAt: DateTimeISO
  createdBy: String!
  deletedAt: DateTimeISO!
  deltedBy: String!
  id: String
  platform: String!
  username: String!
}

input SocialLinkCreateManyWalletInputEnvelope {
  data: [SocialLinkCreateManyWalletInput!]!
}

input SocialLinkCreateNestedManyWithoutWalletInput {
  connect: [SocialLinkWhereUniqueInput!]
  connectOrCreate: [SocialLinkCreateOrConnectWithoutWalletInput!]
  create: [SocialLinkCreateWithoutWalletInput!]
  createMany: SocialLinkCreateManyWalletInputEnvelope
}

input SocialLinkCreateOrConnectWithoutWalletInput {
  create: SocialLinkCreateWithoutWalletInput!
  where: SocialLinkWhereUniqueInput!
}

input SocialLinkCreateWithoutWalletInput {
  createdAt: DateTimeISO
  createdBy: String!
  deletedAt: DateTimeISO!
  deltedBy: String!
  id: String
  platform: String!
  username: String!
}

type SocialLinkGroupBy {
  _count: SocialLinkCountAggregate
  _max: SocialLinkMaxAggregate
  _min: SocialLinkMinAggregate
  createdAt: DateTimeISO!
  createdBy: String!
  deletedAt: DateTimeISO!
  deltedBy: String!
  id: String!
  platform: String!
  username: String!
  walletId: String
}

input SocialLinkListRelationFilter {
  every: SocialLinkWhereInput
  none: SocialLinkWhereInput
  some: SocialLinkWhereInput
}

type SocialLinkMaxAggregate {
  createdAt: DateTimeISO
  createdBy: String
  deletedAt: DateTimeISO
  deltedBy: String
  id: String
  platform: String
  username: String
  walletId: String
}

input SocialLinkMaxOrderByAggregateInput {
  createdAt: SortOrder
  createdBy: SortOrder
  deletedAt: SortOrder
  deltedBy: SortOrder
  id: SortOrder
  platform: SortOrder
  username: SortOrder
  walletId: SortOrder
}

type SocialLinkMinAggregate {
  createdAt: DateTimeISO
  createdBy: String
  deletedAt: DateTimeISO
  deltedBy: String
  id: String
  platform: String
  username: String
  walletId: String
}

input SocialLinkMinOrderByAggregateInput {
  createdAt: SortOrder
  createdBy: SortOrder
  deletedAt: SortOrder
  deltedBy: SortOrder
  id: SortOrder
  platform: SortOrder
  username: SortOrder
  walletId: SortOrder
}

input SocialLinkOrderByRelationAggregateInput {
  _count: SortOrder
}

input SocialLinkOrderByWithAggregationInput {
  _count: SocialLinkCountOrderByAggregateInput
  _max: SocialLinkMaxOrderByAggregateInput
  _min: SocialLinkMinOrderByAggregateInput
  createdAt: SortOrder
  createdBy: SortOrder
  deletedAt: SortOrder
  deltedBy: SortOrder
  id: SortOrder
  platform: SortOrder
  username: SortOrder
  walletId: SortOrder
}

input SocialLinkOrderByWithRelationInput {
  createdAt: SortOrder
  createdBy: SortOrder
  deletedAt: SortOrder
  deltedBy: SortOrder
  id: SortOrder
  platform: SortOrder
  username: SortOrder
  wallet: WalletOrderByWithRelationInput
  walletId: SortOrder
}

enum SocialLinkScalarFieldEnum {
  createdAt
  createdBy
  deletedAt
  deltedBy
  id
  platform
  username
  walletId
}

input SocialLinkScalarWhereInput {
  AND: [SocialLinkScalarWhereInput!]
  NOT: [SocialLinkScalarWhereInput!]
  OR: [SocialLinkScalarWhereInput!]
  createdAt: DateTimeFilter
  createdBy: StringFilter
  deletedAt: DateTimeFilter
  deltedBy: StringFilter
  id: StringFilter
  platform: StringFilter
  username: StringFilter
  walletId: StringNullableFilter
}

input SocialLinkScalarWhereWithAggregatesInput {
  AND: [SocialLinkScalarWhereWithAggregatesInput!]
  NOT: [SocialLinkScalarWhereWithAggregatesInput!]
  OR: [SocialLinkScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  createdBy: StringWithAggregatesFilter
  deletedAt: DateTimeWithAggregatesFilter
  deltedBy: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  platform: StringWithAggregatesFilter
  username: StringWithAggregatesFilter
  walletId: StringNullableWithAggregatesFilter
}

input SocialLinkUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  createdBy: StringFieldUpdateOperationsInput
  deletedAt: DateTimeFieldUpdateOperationsInput
  deltedBy: StringFieldUpdateOperationsInput
  platform: StringFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
  wallet: WalletUpdateOneWithoutSocialLinksNestedInput
}

input SocialLinkUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  createdBy: StringFieldUpdateOperationsInput
  deletedAt: DateTimeFieldUpdateOperationsInput
  deltedBy: StringFieldUpdateOperationsInput
  platform: StringFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
}

input SocialLinkUpdateManyWithWhereWithoutWalletInput {
  data: SocialLinkUpdateManyMutationInput!
  where: SocialLinkScalarWhereInput!
}

input SocialLinkUpdateManyWithoutWalletNestedInput {
  connect: [SocialLinkWhereUniqueInput!]
  connectOrCreate: [SocialLinkCreateOrConnectWithoutWalletInput!]
  create: [SocialLinkCreateWithoutWalletInput!]
  createMany: SocialLinkCreateManyWalletInputEnvelope
  delete: [SocialLinkWhereUniqueInput!]
  deleteMany: [SocialLinkScalarWhereInput!]
  disconnect: [SocialLinkWhereUniqueInput!]
  set: [SocialLinkWhereUniqueInput!]
  update: [SocialLinkUpdateWithWhereUniqueWithoutWalletInput!]
  updateMany: [SocialLinkUpdateManyWithWhereWithoutWalletInput!]
  upsert: [SocialLinkUpsertWithWhereUniqueWithoutWalletInput!]
}

input SocialLinkUpdateWithWhereUniqueWithoutWalletInput {
  data: SocialLinkUpdateWithoutWalletInput!
  where: SocialLinkWhereUniqueInput!
}

input SocialLinkUpdateWithoutWalletInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  createdBy: StringFieldUpdateOperationsInput
  deletedAt: DateTimeFieldUpdateOperationsInput
  deltedBy: StringFieldUpdateOperationsInput
  platform: StringFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
}

input SocialLinkUpsertWithWhereUniqueWithoutWalletInput {
  create: SocialLinkCreateWithoutWalletInput!
  update: SocialLinkUpdateWithoutWalletInput!
  where: SocialLinkWhereUniqueInput!
}

input SocialLinkWhereInput {
  AND: [SocialLinkWhereInput!]
  NOT: [SocialLinkWhereInput!]
  OR: [SocialLinkWhereInput!]
  createdAt: DateTimeFilter
  createdBy: StringFilter
  deletedAt: DateTimeFilter
  deltedBy: StringFilter
  id: StringFilter
  platform: StringFilter
  username: StringFilter
  wallet: WalletNullableRelationFilter
  walletId: StringNullableFilter
}

input SocialLinkWhereUniqueInput {
  AND: [SocialLinkWhereInput!]
  NOT: [SocialLinkWhereInput!]
  OR: [SocialLinkWhereInput!]
  createdAt: DateTimeFilter
  createdBy: StringFilter
  deletedAt: DateTimeFilter
  deltedBy: StringFilter
  id: String
  platform: StringFilter
  username: StringFilter
  wallet: WalletNullableRelationFilter
  walletId: StringNullableFilter
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  isSet: Boolean
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  isSet: Boolean
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type Wallet {
  _count: WalletCount

  """Wallet address"""
  address: String!

  """Chain id, ex. 1 for Ethereum, 56 for Binance Smart Chain"""
  chainId: Int!
  createdAt: DateTimeISO!

  """Initiator of the create action. Ex. user, admin"""
  createdBy: String!

  """soft delete, if set then deleted"""
  deletedAt: DateTimeISO!

  """Initiator of the delete action. Ex. user, admin"""
  deltedBy: String!
  emailLinks(cursor: EmailLinkWhereUniqueInput, distinct: [EmailLinkScalarFieldEnum!], orderBy: [EmailLinkOrderByWithRelationInput!], skip: Int, take: Int, where: EmailLinkWhereInput): [EmailLink!]!
  id: String!
  socialLinks(cursor: SocialLinkWhereUniqueInput, distinct: [SocialLinkScalarFieldEnum!], orderBy: [SocialLinkOrderByWithRelationInput!], skip: Int, take: Int, where: SocialLinkWhereInput): [SocialLink!]!
}

type WalletAvgAggregate {
  chainId: Float
}

input WalletAvgOrderByAggregateInput {
  chainId: SortOrder
}

type WalletCount {
  emailLinks(where: EmailLinkWhereInput): Int!
  socialLinks(where: SocialLinkWhereInput): Int!
}

type WalletCountAggregate {
  _all: Int!
  address: Int!
  chainId: Int!
  createdAt: Int!
  createdBy: Int!
  deletedAt: Int!
  deltedBy: Int!
  id: Int!
}

input WalletCountOrderByAggregateInput {
  address: SortOrder
  chainId: SortOrder
  createdAt: SortOrder
  createdBy: SortOrder
  deletedAt: SortOrder
  deltedBy: SortOrder
  id: SortOrder
}

input WalletCreateInput {
  address: String!
  chainId: Int!
  createdAt: DateTimeISO
  createdBy: String!
  deletedAt: DateTimeISO!
  deltedBy: String!
  emailLinks: EmailLinkCreateNestedManyWithoutWalletInput
  id: String
  socialLinks: SocialLinkCreateNestedManyWithoutWalletInput
}

input WalletCreateManyInput {
  address: String!
  chainId: Int!
  createdAt: DateTimeISO
  createdBy: String!
  deletedAt: DateTimeISO!
  deltedBy: String!
  id: String
}

input WalletCreateNestedOneWithoutEmailLinksInput {
  connect: WalletWhereUniqueInput
  connectOrCreate: WalletCreateOrConnectWithoutEmailLinksInput
  create: WalletCreateWithoutEmailLinksInput
}

input WalletCreateNestedOneWithoutSocialLinksInput {
  connect: WalletWhereUniqueInput
  connectOrCreate: WalletCreateOrConnectWithoutSocialLinksInput
  create: WalletCreateWithoutSocialLinksInput
}

input WalletCreateOrConnectWithoutEmailLinksInput {
  create: WalletCreateWithoutEmailLinksInput!
  where: WalletWhereUniqueInput!
}

input WalletCreateOrConnectWithoutSocialLinksInput {
  create: WalletCreateWithoutSocialLinksInput!
  where: WalletWhereUniqueInput!
}

input WalletCreateWithoutEmailLinksInput {
  address: String!
  chainId: Int!
  createdAt: DateTimeISO
  createdBy: String!
  deletedAt: DateTimeISO!
  deltedBy: String!
  id: String
  socialLinks: SocialLinkCreateNestedManyWithoutWalletInput
}

input WalletCreateWithoutSocialLinksInput {
  address: String!
  chainId: Int!
  createdAt: DateTimeISO
  createdBy: String!
  deletedAt: DateTimeISO!
  deltedBy: String!
  emailLinks: EmailLinkCreateNestedManyWithoutWalletInput
  id: String
}

type WalletGroupBy {
  _avg: WalletAvgAggregate
  _count: WalletCountAggregate
  _max: WalletMaxAggregate
  _min: WalletMinAggregate
  _sum: WalletSumAggregate
  address: String!
  chainId: Int!
  createdAt: DateTimeISO!
  createdBy: String!
  deletedAt: DateTimeISO!
  deltedBy: String!
  id: String!
}

type WalletMaxAggregate {
  address: String
  chainId: Int
  createdAt: DateTimeISO
  createdBy: String
  deletedAt: DateTimeISO
  deltedBy: String
  id: String
}

input WalletMaxOrderByAggregateInput {
  address: SortOrder
  chainId: SortOrder
  createdAt: SortOrder
  createdBy: SortOrder
  deletedAt: SortOrder
  deltedBy: SortOrder
  id: SortOrder
}

type WalletMinAggregate {
  address: String
  chainId: Int
  createdAt: DateTimeISO
  createdBy: String
  deletedAt: DateTimeISO
  deltedBy: String
  id: String
}

input WalletMinOrderByAggregateInput {
  address: SortOrder
  chainId: SortOrder
  createdAt: SortOrder
  createdBy: SortOrder
  deletedAt: SortOrder
  deltedBy: SortOrder
  id: SortOrder
}

input WalletNullableRelationFilter {
  is: WalletWhereInput
  isNot: WalletWhereInput
}

input WalletOrderByWithAggregationInput {
  _avg: WalletAvgOrderByAggregateInput
  _count: WalletCountOrderByAggregateInput
  _max: WalletMaxOrderByAggregateInput
  _min: WalletMinOrderByAggregateInput
  _sum: WalletSumOrderByAggregateInput
  address: SortOrder
  chainId: SortOrder
  createdAt: SortOrder
  createdBy: SortOrder
  deletedAt: SortOrder
  deltedBy: SortOrder
  id: SortOrder
}

input WalletOrderByWithRelationInput {
  address: SortOrder
  chainId: SortOrder
  createdAt: SortOrder
  createdBy: SortOrder
  deletedAt: SortOrder
  deltedBy: SortOrder
  emailLinks: EmailLinkOrderByRelationAggregateInput
  id: SortOrder
  socialLinks: SocialLinkOrderByRelationAggregateInput
}

enum WalletScalarFieldEnum {
  address
  chainId
  createdAt
  createdBy
  deletedAt
  deltedBy
  id
}

input WalletScalarWhereWithAggregatesInput {
  AND: [WalletScalarWhereWithAggregatesInput!]
  NOT: [WalletScalarWhereWithAggregatesInput!]
  OR: [WalletScalarWhereWithAggregatesInput!]
  address: StringWithAggregatesFilter
  chainId: IntWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  createdBy: StringWithAggregatesFilter
  deletedAt: DateTimeWithAggregatesFilter
  deltedBy: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
}

type WalletSumAggregate {
  chainId: Int
}

input WalletSumOrderByAggregateInput {
  chainId: SortOrder
}

input WalletUpdateInput {
  address: StringFieldUpdateOperationsInput
  chainId: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  createdBy: StringFieldUpdateOperationsInput
  deletedAt: DateTimeFieldUpdateOperationsInput
  deltedBy: StringFieldUpdateOperationsInput
  emailLinks: EmailLinkUpdateManyWithoutWalletNestedInput
  socialLinks: SocialLinkUpdateManyWithoutWalletNestedInput
}

input WalletUpdateManyMutationInput {
  address: StringFieldUpdateOperationsInput
  chainId: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  createdBy: StringFieldUpdateOperationsInput
  deletedAt: DateTimeFieldUpdateOperationsInput
  deltedBy: StringFieldUpdateOperationsInput
}

input WalletUpdateOneWithoutEmailLinksNestedInput {
  connect: WalletWhereUniqueInput
  connectOrCreate: WalletCreateOrConnectWithoutEmailLinksInput
  create: WalletCreateWithoutEmailLinksInput
  delete: WalletWhereInput
  disconnect: Boolean
  update: WalletUpdateToOneWithWhereWithoutEmailLinksInput
  upsert: WalletUpsertWithoutEmailLinksInput
}

input WalletUpdateOneWithoutSocialLinksNestedInput {
  connect: WalletWhereUniqueInput
  connectOrCreate: WalletCreateOrConnectWithoutSocialLinksInput
  create: WalletCreateWithoutSocialLinksInput
  delete: WalletWhereInput
  disconnect: Boolean
  update: WalletUpdateToOneWithWhereWithoutSocialLinksInput
  upsert: WalletUpsertWithoutSocialLinksInput
}

input WalletUpdateToOneWithWhereWithoutEmailLinksInput {
  data: WalletUpdateWithoutEmailLinksInput!
  where: WalletWhereInput
}

input WalletUpdateToOneWithWhereWithoutSocialLinksInput {
  data: WalletUpdateWithoutSocialLinksInput!
  where: WalletWhereInput
}

input WalletUpdateWithoutEmailLinksInput {
  address: StringFieldUpdateOperationsInput
  chainId: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  createdBy: StringFieldUpdateOperationsInput
  deletedAt: DateTimeFieldUpdateOperationsInput
  deltedBy: StringFieldUpdateOperationsInput
  socialLinks: SocialLinkUpdateManyWithoutWalletNestedInput
}

input WalletUpdateWithoutSocialLinksInput {
  address: StringFieldUpdateOperationsInput
  chainId: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  createdBy: StringFieldUpdateOperationsInput
  deletedAt: DateTimeFieldUpdateOperationsInput
  deltedBy: StringFieldUpdateOperationsInput
  emailLinks: EmailLinkUpdateManyWithoutWalletNestedInput
}

input WalletUpsertWithoutEmailLinksInput {
  create: WalletCreateWithoutEmailLinksInput!
  update: WalletUpdateWithoutEmailLinksInput!
  where: WalletWhereInput
}

input WalletUpsertWithoutSocialLinksInput {
  create: WalletCreateWithoutSocialLinksInput!
  update: WalletUpdateWithoutSocialLinksInput!
  where: WalletWhereInput
}

input WalletWhereInput {
  AND: [WalletWhereInput!]
  NOT: [WalletWhereInput!]
  OR: [WalletWhereInput!]
  address: StringFilter
  chainId: IntFilter
  createdAt: DateTimeFilter
  createdBy: StringFilter
  deletedAt: DateTimeFilter
  deltedBy: StringFilter
  emailLinks: EmailLinkListRelationFilter
  id: StringFilter
  socialLinks: SocialLinkListRelationFilter
}

input WalletWhereUniqueInput {
  AND: [WalletWhereInput!]
  NOT: [WalletWhereInput!]
  OR: [WalletWhereInput!]
  address: StringFilter
  chainId: IntFilter
  createdAt: DateTimeFilter
  createdBy: StringFilter
  deletedAt: DateTimeFilter
  deltedBy: StringFilter
  emailLinks: EmailLinkListRelationFilter
  id: String
  socialLinks: SocialLinkListRelationFilter
}