# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

type EmailLink {
  createdAt: DateTimeISO!

  """Initiator of the create action. Ex. user, admin"""
  createdBy: String!

  """soft delete, if set then deleted"""
  deletedAt: DateTimeISO

  """Initiator of the delete action. Ex. user, admin"""
  deltedBy: String
  email: String!
  id: String!
  wallet(where: WalletWhereInput): Wallet
  walletId: String
}

input EmailLinkListRelationFilter {
  every: EmailLinkWhereInput
  none: EmailLinkWhereInput
  some: EmailLinkWhereInput
}

input EmailLinkOrderByRelationAggregateInput {
  _count: SortOrder
}

input EmailLinkOrderByWithRelationInput {
  createdBy: SortOrder
  deltedBy: SortOrder
  email: SortOrder
  wallet: WalletOrderByWithRelationInput
  walletId: SortOrder
}

enum EmailLinkScalarFieldEnum {
  createdAt
  createdBy
  deletedAt
  deltedBy
  email
  id
  walletId
}

input EmailLinkWhereInput {
  AND: [EmailLinkWhereInput!]
  NOT: [EmailLinkWhereInput!]
  OR: [EmailLinkWhereInput!]
  createdBy: StringFilter
  deltedBy: StringNullableFilter
  email: StringFilter
  wallet: WalletNullableRelationFilter
  walletId: StringNullableFilter
}

input EmailLinkWhereUniqueInput {
  AND: [EmailLinkWhereInput!]
  NOT: [EmailLinkWhereInput!]
  OR: [EmailLinkWhereInput!]
  createdBy: StringFilter
  deltedBy: StringNullableFilter
  email: StringFilter
  wallet: WalletNullableRelationFilter
  walletId: StringNullableFilter
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  isSet: Boolean
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Query {
  wallet(where: WalletWhereUniqueInput!): Wallet
}

enum QueryMode {
  default
  insensitive
}

type SocialLink {
  createdAt: DateTimeISO!

  """Initiator of the create action. Ex. user, admin"""
  createdBy: String!

  """soft delete, if set then deleted"""
  deletedAt: DateTimeISO

  """Initiator of the delete action. Ex. user, admin"""
  deltedBy: String
  id: String!

  """twitter, facebook, instagram, etc."""
  platform: String!
  username: String!
  wallet(where: WalletWhereInput): Wallet
  walletId: String
}

input SocialLinkListRelationFilter {
  every: SocialLinkWhereInput
  none: SocialLinkWhereInput
  some: SocialLinkWhereInput
}

input SocialLinkOrderByRelationAggregateInput {
  _count: SortOrder
}

input SocialLinkOrderByWithRelationInput {
  createdBy: SortOrder
  deltedBy: SortOrder
  platform: SortOrder
  username: SortOrder
  wallet: WalletOrderByWithRelationInput
  walletId: SortOrder
}

enum SocialLinkScalarFieldEnum {
  createdAt
  createdBy
  deletedAt
  deltedBy
  id
  platform
  username
  walletId
}

input SocialLinkWhereInput {
  AND: [SocialLinkWhereInput!]
  NOT: [SocialLinkWhereInput!]
  OR: [SocialLinkWhereInput!]
  createdBy: StringFilter
  deltedBy: StringNullableFilter
  platform: StringFilter
  username: StringFilter
  wallet: WalletNullableRelationFilter
  walletId: StringNullableFilter
}

input SocialLinkWhereUniqueInput {
  AND: [SocialLinkWhereInput!]
  NOT: [SocialLinkWhereInput!]
  OR: [SocialLinkWhereInput!]
  createdBy: StringFilter
  deltedBy: StringNullableFilter
  platform: StringFilter
  username: StringFilter
  wallet: WalletNullableRelationFilter
  walletId: StringNullableFilter
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  isSet: Boolean
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Wallet {
  _count: WalletCount

  """Wallet address"""
  address: String!

  """Chain id, ex. 1 for Ethereum, 56 for Binance Smart Chain"""
  chainId: Int!
  createdAt: DateTimeISO!

  """Initiator of the create action. Ex. user, admin"""
  createdBy: String!

  """soft delete, if set then deleted"""
  deletedAt: DateTimeISO

  """Initiator of the delete action. Ex. user, admin"""
  deltedBy: String
  emailLinks(cursor: EmailLinkWhereUniqueInput, distinct: [EmailLinkScalarFieldEnum!], orderBy: [EmailLinkOrderByWithRelationInput!], skip: Int, take: Int, where: EmailLinkWhereInput): [EmailLink!]!
  id: String!
  socialLinks(cursor: SocialLinkWhereUniqueInput, distinct: [SocialLinkScalarFieldEnum!], orderBy: [SocialLinkOrderByWithRelationInput!], skip: Int, take: Int, where: SocialLinkWhereInput): [SocialLink!]!
}

input WalletAddressChainIdCompoundUniqueInput {
  address: String!
  chainId: Int!
}

type WalletCount {
  emailLinks(where: EmailLinkWhereInput): Int!
  socialLinks(where: SocialLinkWhereInput): Int!
}

input WalletNullableRelationFilter {
  is: WalletWhereInput
  isNot: WalletWhereInput
}

input WalletOrderByWithRelationInput {
  address: SortOrder
  chainId: SortOrder
  createdBy: SortOrder
  deltedBy: SortOrder
  emailLinks: EmailLinkOrderByRelationAggregateInput
  socialLinks: SocialLinkOrderByRelationAggregateInput
}

input WalletWhereInput {
  AND: [WalletWhereInput!]
  NOT: [WalletWhereInput!]
  OR: [WalletWhereInput!]
  address: StringFilter
  chainId: IntFilter
  createdBy: StringFilter
  deltedBy: StringNullableFilter
  emailLinks: EmailLinkListRelationFilter
  socialLinks: SocialLinkListRelationFilter
}

input WalletWhereUniqueInput {
  AND: [WalletWhereInput!]
  NOT: [WalletWhereInput!]
  OR: [WalletWhereInput!]
  address: StringFilter
  address_chainId: WalletAddressChainIdCompoundUniqueInput
  chainId: IntFilter
  createdBy: StringFilter
  deltedBy: StringNullableFilter
  emailLinks: EmailLinkListRelationFilter
  socialLinks: SocialLinkListRelationFilter
}