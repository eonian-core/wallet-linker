// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Wallet {
  /// @TypeGraphQL.omit(output: false, input: true)
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  /// @TypeGraphQL.omit(output: false, input: true)
  createdAt      DateTime @default(now())
  /// Initiator of the create action. Ex. user, admin
  createdBy      String
  /// soft delete, if set then deleted
  /// @TypeGraphQL.omit(output: false, input: true)
  deletedAt      DateTime?
  /// Initiator of the delete action. Ex. user, admin
  deltedBy       String?
  
  /// Wallet address
  address        String
  /// Chain id, ex. 1 for Ethereum, 56 for Binance Smart Chain
  chainId        Int

  emailLinks     EmailLink[]
  socialLinks    SocialLink[]

  @@unique([address, chainId])
}

model EmailLink {
  /// @TypeGraphQL.omit(output: false, input: true)
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  /// @TypeGraphQL.omit(output: false, input: true)
  createdAt DateTime @default(now())
  /// Initiator of the create action. Ex. user, admin
  createdBy      String
  /// soft delete, if set then deleted
  /// @TypeGraphQL.omit(output: false, input: true)
  deletedAt      DateTime?
  /// Initiator of the delete action. Ex. user, admin
  deltedBy       String?

  wallet    Wallet?  @relation(fields: [walletId], references: [id])
  walletId  String?  @db.ObjectId
  
  email String
}

model SocialLink {
  /// @TypeGraphQL.omit(output: false, input: true)
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  /// @TypeGraphQL.omit(output: false, input: true)
  createdAt DateTime @default(now())
  /// Initiator of the create action. Ex. user, admin
  createdBy      String
  /// soft delete, if set then deleted
  /// @TypeGraphQL.omit(output: false, input: true)
  deletedAt      DateTime?
  /// Initiator of the delete action. Ex. user, admin
  deltedBy       String?

  wallet    Wallet?  @relation(fields: [walletId], references: [id])
  walletId  String?  @db.ObjectId
  
  /// twitter, facebook, instagram, etc.
  platform  String 
  username  String
}
